let Koa,Router,bodyParser,mongoose,api,jwtMiddleware;_fa5‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_fa5‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_fa5‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_fa5‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_fa5‍.w("./api",[["default",["api"],function(v){api=v}]]);_fa5‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);require('dotenv').config();








// 비구조화 할당을 통해 process.env 내부값에 대한 레퍼런스 만들기
const {PORT, MONGO_URI} = process.env;

mongoose
.connect(MONGO_URI, {useNewUrlParser:true, useFindAndModify:false})
.then(()=>{
    console.log('Connected to MongoDB');
})
.catch((e)=>{
    _fa5‍.g.console.error(e);
});

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api',api.routes());

// 라우터 적용 전에 bodyParser 적용
app.use(bodyParser());
app.use(jwtMiddleware);

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

app.listen(4000, ()=>{
    console.log('Listening to port 4000');
});